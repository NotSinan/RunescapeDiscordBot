import fetch from "cross-fetch";
import { stringify } from "javascript-stringify";
const SPECIAL_FUNCTION_REGEX = /['"]__BEGINFUNCTION__(.*?)__ENDFUNCTION__['"]/g;
function doStringify(chartConfig) {
  const str = stringify(chartConfig);
  if (!str) {
    return void 0;
  }
  return str.replace(SPECIAL_FUNCTION_REGEX, "$1");
}
function postJson(url, payload) {
  return fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload)
  });
}
class QuickChart {
  constructor(apiKey, accountId) {
    this.apiKey = apiKey;
    this.accountId = accountId;
    this.host = "quickchart.io";
    this.scheme = "https";
    this.baseUrl = `${this.scheme}://${this.host}`;
    this.chart = void 0;
    this.width = 500;
    this.height = 300;
    this.devicePixelRatio = 1;
    this.backgroundColor = "#ffffff";
    this.format = "png";
    this.version = "2.9.4";
  }
  setConfig(chartConfig) {
    this.chart = typeof chartConfig === "string" ? chartConfig : doStringify(chartConfig);
    return this;
  }
  setWidth(width) {
    this.width = width;
    return this;
  }
  setHeight(height) {
    this.height = height;
    return this;
  }
  setBackgroundColor(color) {
    this.backgroundColor = color;
    return this;
  }
  setDevicePixelRatio(ratio) {
    this.devicePixelRatio = ratio;
    return this;
  }
  setFormat(fmt) {
    this.format = fmt;
    return this;
  }
  setVersion(version) {
    this.version = version;
    return this;
  }
  isValid() {
    if (!this.chart) {
      return false;
    }
    return true;
  }
  getUrlObject() {
    if (!this.isValid()) {
      throw new Error("You must call setConfig before getUrl");
    }
    const ret = new URL(`${this.baseUrl}/chart`);
    ret.searchParams.append("c", this.chart);
    ret.searchParams.append("w", String(this.width));
    ret.searchParams.append("h", String(this.height));
    if (this.devicePixelRatio !== 1) {
      ret.searchParams.append("devicePixelRatio", String(this.devicePixelRatio));
    }
    if (this.backgroundColor) {
      ret.searchParams.append("bkg", this.backgroundColor);
    }
    if (this.format) {
      ret.searchParams.append("f", this.format);
    }
    if (this.version) {
      ret.searchParams.append("v", this.version);
    }
    if (this.apiKey) {
      ret.searchParams.append("key", this.apiKey);
    }
    return ret;
  }
  getUrl() {
    return this.getUrlObject().href;
  }
  getSignedUrl() {
    if (!this.accountId || !this.apiKey) {
      throw new Error("You must set accountId and apiKey in the QuickChart constructor to use getSignedUrl()");
    }
    const crypto = require("crypto");
    const urlObj = this.getUrlObject();
    const chartStr = urlObj.searchParams.get("c");
    const signature = crypto.createHmac("sha256", this.apiKey).update(chartStr).digest("hex");
    urlObj.searchParams.append("sig", signature);
    urlObj.searchParams.append("accountId", this.accountId);
    urlObj.searchParams.delete("key");
    return urlObj.href;
  }
  getPostData() {
    if (!this.isValid()) {
      throw new Error("You must call setConfig creating post data");
    }
    const { width, height, chart, format, version, backgroundColor, devicePixelRatio, apiKey } = this;
    const postData = {
      width,
      height,
      chart
    };
    if (format) {
      postData.format = format;
    }
    if (version) {
      postData.version = version;
    }
    if (backgroundColor) {
      postData.backgroundColor = backgroundColor;
    }
    if (devicePixelRatio) {
      postData.devicePixelRatio = devicePixelRatio;
    }
    if (apiKey) {
      postData.key = apiKey;
    }
    return postData;
  }
  async getShortUrl() {
    if (!this.isValid()) {
      throw new Error("You must call setConfig before getUrl");
    }
    if (this.host !== "quickchart.io") {
      throw new Error("Short URLs must use quickchart.io host");
    }
    const resp = await postJson(`${this.baseUrl}/chart/create`, this.getPostData());
    if (!resp.ok) {
      const quickchartError = resp.headers.get("x-quickchart-error");
      const details = quickchartError ? `
${quickchartError}` : "";
      throw new Error(`Chart shorturl creation failed with status code ${resp.status}${details}`);
    }
    const json = await resp.json();
    if (!json || !json.success || !json.url) {
      throw new Error("Received failure response from chart shorturl endpoint");
    } else {
      return json.url;
    }
  }
  async toBinary() {
    if (!this.isValid()) {
      throw new Error("You must call setConfig before getUrl");
    }
    const resp = await postJson(`${this.baseUrl}/chart`, this.getPostData());
    if (!resp.ok) {
      const quickchartError = resp.headers.get("x-quickchart-error");
      const details = quickchartError ? `
${quickchartError}` : "";
      throw new Error(`Chart creation failed with status code ${resp.status}${details}`);
    }
    const data = await resp.arrayBuffer();
    return Buffer.from(data);
  }
  async toDataUrl() {
    const buf = await this.toBinary();
    const b64buf = buf.toString("base64");
    const type = this.format === "svg" ? "svg+xml" : "png";
    return `data:image/${type};base64,${b64buf}`;
  }
  async toFile(pathOrDescriptor) {
    const fs = require("fs");
    const buf = await this.toBinary();
    fs.writeFileSync(pathOrDescriptor, buf);
  }
  static getGradientFillHelper(direction, colors, dimensions) {
    return `__BEGINFUNCTION__getGradientFillHelper(${JSON.stringify(direction)}, ${JSON.stringify(colors)}, ${JSON.stringify(dimensions)})__ENDFUNCTION__`;
  }
  static getGradientFill(colorOptions, linearGradient) {
    return `__BEGINFUNCTION__getGradientFill(${JSON.stringify(colorOptions)}, ${JSON.stringify(linearGradient)})__ENDFUNCTION__`;
  }
  static getImageFill(url) {
    return `__BEGINFUNCTION__getImageFill(${JSON.stringify(url)})__ENDFUNCTION__`;
  }
}
QuickChart.pattern = {
  draw: function(shapeType, backgroundColor, patternColor, requestedSize) {
    return `__BEGINFUNCTION__pattern.draw(${JSON.stringify(shapeType)}, ${JSON.stringify(backgroundColor)}, ${JSON.stringify(patternColor)}, ${JSON.stringify(requestedSize)})__ENDFUNCTION__`;
  }
};
var src_default = QuickChart;
export {
  src_default as default
};
//# sourceMappingURL=quickchart.esm.js.map
