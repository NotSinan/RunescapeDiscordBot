{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import fetch from 'cross-fetch';\nimport { stringify } from 'javascript-stringify';\n\nimport type { ChartConfiguration } from 'chart.js';\nimport type { Response } from 'cross-fetch';\n\nconst SPECIAL_FUNCTION_REGEX: RegExp = /['\"]__BEGINFUNCTION__(.*?)__ENDFUNCTION__['\"]/g;\n\ninterface PostData {\n  chart: string;\n  width?: number;\n  height?: number;\n  format?: string;\n  version?: string;\n  backgroundColor?: string;\n  devicePixelRatio?: number;\n  key?: string;\n}\n\ninterface GradientFillOption {\n  offset: number;\n  color: string;\n}\n\ninterface GradientDimensionOption {\n  width?: number;\n  height?: number;\n}\n\nfunction doStringify(chartConfig: ChartConfiguration): string | undefined {\n  const str = stringify(chartConfig);\n  if (!str) {\n    return undefined;\n  }\n  return str.replace(SPECIAL_FUNCTION_REGEX, '$1');\n}\n\nfunction postJson(url: string, payload: PostData): Promise<Response> {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n  });\n}\n\nclass QuickChart {\n  private host: string;\n  private scheme: string;\n  private baseUrl: string;\n  private width: number;\n  private height: number;\n  private devicePixelRatio: number;\n  private backgroundColor: string;\n  private format: string;\n  private version: string;\n\n  private chart?: string;\n  private apiKey?: string;\n  private accountId?: string;\n\n  constructor(apiKey?: string, accountId?: string) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n\n    this.host = 'quickchart.io';\n    this.scheme = 'https';\n    this.baseUrl = `${this.scheme}://${this.host}`;\n\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n    this.version = '2.9.4';\n  }\n\n  setConfig(chartConfig: string | ChartConfiguration): QuickChart {\n    this.chart = typeof chartConfig === 'string' ? chartConfig : doStringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width: number): QuickChart {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height: number): QuickChart {\n    this.height = height;\n    return this;\n  }\n\n  setBackgroundColor(color: string): QuickChart {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio: number): QuickChart {\n    this.devicePixelRatio = ratio;\n    return this;\n  }\n\n  setFormat(fmt: string): QuickChart {\n    this.format = fmt;\n    return this;\n  }\n\n  setVersion(version: string): QuickChart {\n    this.version = version;\n    return this;\n  }\n\n  isValid(): boolean {\n    if (!this.chart) {\n      return false;\n    }\n    return true;\n  }\n\n  private getUrlObject(): URL {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append('c', this.chart!);\n    ret.searchParams.append('w', String(this.width));\n    ret.searchParams.append('h', String(this.height));\n    if (this.devicePixelRatio !== 1.0) {\n      ret.searchParams.append('devicePixelRatio', String(this.devicePixelRatio));\n    }\n    if (this.backgroundColor) {\n      ret.searchParams.append('bkg', this.backgroundColor);\n    }\n    if (this.format) {\n      ret.searchParams.append('f', this.format);\n    }\n    if (this.version) {\n      ret.searchParams.append('v', this.version);\n    }\n    if (this.apiKey) {\n      ret.searchParams.append('key', this.apiKey);\n    }\n    return ret;\n  }\n\n  getUrl(): string {\n    return this.getUrlObject().href;\n  }\n\n  getSignedUrl(): string {\n    if (!this.accountId || !this.apiKey) {\n      throw new Error(\n        'You must set accountId and apiKey in the QuickChart constructor to use getSignedUrl()',\n      );\n    }\n    const crypto = require('crypto');\n    const urlObj = this.getUrlObject();\n    const chartStr = urlObj.searchParams.get('c');\n\n    const signature = crypto.createHmac('sha256', this.apiKey).update(chartStr).digest('hex');\n    urlObj.searchParams.append('sig', signature);\n    urlObj.searchParams.append('accountId', this.accountId);\n    urlObj.searchParams.delete('key');\n    return urlObj.href;\n  }\n\n  getPostData(): PostData {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig creating post data');\n    }\n\n    const { width, height, chart, format, version, backgroundColor, devicePixelRatio, apiKey } =\n      this;\n    const postData: PostData = {\n      width,\n      height,\n      chart: chart!,\n    };\n    if (format) {\n      postData.format = format;\n    }\n    if (version) {\n      postData.version = version;\n    }\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n    if (apiKey) {\n      postData.key = apiKey;\n    }\n    return postData;\n  }\n\n  async getShortUrl(): Promise<string> {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    if (this.host !== 'quickchart.io') {\n      throw new Error('Short URLs must use quickchart.io host');\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart/create`, this.getPostData());\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get('x-quickchart-error');\n      const details = quickchartError ? `\\n${quickchartError}` : '';\n      throw new Error(`Chart shorturl creation failed with status code ${resp.status}${details}`);\n    }\n\n    const json = (await resp.json()) as undefined | { success?: boolean; url?: string };\n    if (!json || !json.success || !json.url) {\n      throw new Error('Received failure response from chart shorturl endpoint');\n    } else {\n      return json.url;\n    }\n  }\n\n  async toBinary(): Promise<Buffer> {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart`, this.getPostData());\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get('x-quickchart-error');\n      const details = quickchartError ? `\\n${quickchartError}` : '';\n      throw new Error(`Chart creation failed with status code ${resp.status}${details}`);\n    }\n    const data = await resp.arrayBuffer();\n    return Buffer.from(data);\n  }\n\n  async toDataUrl(): Promise<string> {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString('base64');\n    const type = this.format === 'svg' ? 'svg+xml' : 'png';\n    return `data:image/${type};base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor: string): Promise<void> {\n    const fs = require('fs');\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n\n  static getGradientFillHelper(\n    direction: string,\n    colors: string[],\n    dimensions?: GradientDimensionOption,\n  ): string {\n    return `__BEGINFUNCTION__getGradientFillHelper(${JSON.stringify(direction)}, ${JSON.stringify(\n      colors,\n    )}, ${JSON.stringify(dimensions)})__ENDFUNCTION__`;\n  }\n\n  static getGradientFill(\n    colorOptions: GradientFillOption[],\n    linearGradient: [number, number, number, number],\n  ): string {\n    return `__BEGINFUNCTION__getGradientFill(${JSON.stringify(colorOptions)}, ${JSON.stringify(\n      linearGradient,\n    )})__ENDFUNCTION__`;\n  }\n\n  static getImageFill(url: string): string {\n    return `__BEGINFUNCTION__getImageFill(${JSON.stringify(url)})__ENDFUNCTION__`;\n  }\n\n  static pattern = {\n    draw: function (\n      shapeType: string,\n      backgroundColor: string,\n      patternColor: string,\n      requestedSize: number,\n    ): string {\n      return `__BEGINFUNCTION__pattern.draw(${JSON.stringify(shapeType)}, ${JSON.stringify(\n        backgroundColor,\n      )}, ${JSON.stringify(patternColor)}, ${JSON.stringify(requestedSize)})__ENDFUNCTION__`;\n    },\n  };\n}\n\nexport default QuickChart;\n"],
  "mappings": "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",
  "names": []
}
